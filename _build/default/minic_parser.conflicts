
** Conflict (shift/reduce) in state 154.
** Token involved: ELSE
** This state is reached from program after reading:

typ IDENT LPAR parameter_list RPAR BEGIN IF LPAR expression RPAR IF LPAR expression RPAR instruction 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
function_decl 
typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) END 
                                         instruction list(instruction) 
                                         (?)

** In state 154, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAR expression RPAR instruction ELSE instruction 
                        IF LPAR expression RPAR instruction . ELSE instruction 

** In state 154, looking ahead at ELSE, reducing production
** instruction -> IF LPAR expression RPAR instruction 
** is permitted because of the following sub-derivation:

IF LPAR expression RPAR instruction ELSE instruction // lookahead token appears
                        IF LPAR expression RPAR instruction . 

** Conflict (shift/reduce) in state 149.
** Tokens involved: WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD
** The following explanations concentrate on token ELSE.
** This state is reached from program after reading:

typ IDENT LPAR parameter_list RPAR BEGIN IF LPAR expression RPAR BEGIN list(instruction) END 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
function_decl 
typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) END 
                                         instruction list(instruction) 
                                         (?)

** In state 149, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAR expression RPAR BEGIN list(instruction) END . ELSE BEGIN list(instruction) END 

** In state 149, looking ahead at ELSE, reducing production
** instruction -> BEGIN list(instruction) END 
** is permitted because of the following sub-derivation:

IF LPAR expression RPAR instruction ELSE instruction // lookahead token appears
                        BEGIN list(instruction) END . 

** Conflict (shift/reduce) in state 52.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression ADD expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 52, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression ADD expression 
               expression . XOR expression 

** In state 52, looking ahead at XOR, reducing production
** expression -> expression ADD expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression ADD expression . 

** Conflict (shift/reduce) in state 50.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression AND expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 50, looking ahead at XOR, reducing production
** expression -> expression AND expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression AND expression . 

** In state 50, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression AND expression 
               expression . XOR expression 

** Conflict (shift/reduce) in state 48.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression BAND expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 48, looking ahead at XOR, reducing production
** expression -> expression BAND expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression BAND expression . 

** In state 48, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression BAND expression 
                expression . XOR expression 

** Conflict (shift/reduce) in state 46.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression BNEQ expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 46, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression BNEQ expression 
                expression . XOR expression 

** In state 46, looking ahead at XOR, reducing production
** expression -> expression BNEQ expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression BNEQ expression . 

** Conflict (shift/reduce) in state 44.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression BOR expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 44, looking ahead at XOR, reducing production
** expression -> expression BOR expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression BOR expression . 

** In state 44, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression BOR expression 
               expression . XOR expression 

** Conflict (shift/reduce) in state 42.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression BXOR expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 42, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression BXOR expression 
                expression . XOR expression 

** In state 42, looking ahead at XOR, reducing production
** expression -> expression BXOR expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression BXOR expression . 

** Conflict (shift/reduce) in state 40.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression DIV expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 40, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression DIV expression 
               expression . XOR expression 

** In state 40, looking ahead at XOR, reducing production
** expression -> expression DIV expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression DIV expression . 

** Conflict (shift/reduce) in state 38.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression EQ expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 38, looking ahead at XOR, reducing production
** expression -> expression EQ expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression EQ expression . 

** In state 38, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression EQ expression 
              expression . XOR expression 

** Conflict (shift/reduce) in state 36.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression GET expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 36, looking ahead at XOR, reducing production
** expression -> expression GET expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression GET expression . 

** In state 36, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression GET expression 
               expression . XOR expression 

** Conflict (shift/reduce) in state 34.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression GT expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 34, looking ahead at XOR, reducing production
** expression -> expression GT expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression GT expression . 

** In state 34, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression GT expression 
              expression . XOR expression 

** Conflict (shift/reduce) in state 32.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression LET expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 32, looking ahead at XOR, reducing production
** expression -> expression LET expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression LET expression . 

** In state 32, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression LET expression 
               expression . XOR expression 

** Conflict (shift/reduce) in state 30.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression LT expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 30, looking ahead at XOR, reducing production
** expression -> expression LT expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression LT expression . 

** In state 30, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression LT expression 
              expression . XOR expression 

** Conflict (shift/reduce) in state 28.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression MOD expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 28, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression MOD expression 
               expression . XOR expression 

** In state 28, looking ahead at XOR, reducing production
** expression -> expression MOD expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression MOD expression . 

** Conflict (shift/reduce) in state 26.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression MUL expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 26, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression MUL expression 
               expression . XOR expression 

** In state 26, looking ahead at XOR, reducing production
** expression -> expression MUL expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression MUL expression . 

** Conflict (shift/reduce) in state 24.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression NEQ expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 24, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression NEQ expression 
               expression . XOR expression 

** In state 24, looking ahead at XOR, reducing production
** expression -> expression NEQ expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression NEQ expression . 

** Conflict (shift/reduce) in state 22.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression OR expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 22, looking ahead at XOR, reducing production
** expression -> expression OR expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression OR expression . 

** In state 22, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression OR expression 
              expression . XOR expression 

** Conflict (shift/reduce) in state 20.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression SUB expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 20, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression SUB expression 
               expression . XOR expression 

** In state 20, looking ahead at XOR, reducing production
** expression -> expression SUB expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression SUB expression . 

** Conflict (shift/reduce) in state 18.
** Tokens involved: XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD
** The following explanations concentrate on token XOR.
** This state is reached from program after reading:

IDENT SET expression XOR expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
global_scope_def_list EOF 
global_scope_def global_scope_def_list 
variable_decl_set 
variable_set SEMI 
IDENT SET expression 
          (?)

** In state 18, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

expression XOR expression 
               expression . XOR expression 

** In state 18, looking ahead at XOR, reducing production
** expression -> expression XOR expression 
** is permitted because of the following sub-derivation:

expression XOR expression // lookahead token appears
expression XOR expression . 
