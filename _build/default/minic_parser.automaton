State 0:
program' -> . program [ # ]
-- On error shift to state 1
-- On INT shift to state 2
-- On variable_decl shift to state 3
-- On typ shift to state 4
-- On program shift to state 24
-- On function_decl shift to state 21
-- On declaration_list shift to state 25
-- On EOF reduce production declaration_list -> 

State 1:
program -> error . [ # ]
-- On # reduce production program -> error 

State 2:
typ -> INT . [ IDENT ]
-- On IDENT reduce production typ -> INT 

State 3:
declaration_list -> variable_decl . declaration_list [ EOF ]
-- On INT shift to state 2
-- On variable_decl shift to state 3
-- On typ shift to state 4
-- On function_decl shift to state 21
-- On declaration_list shift to state 23
-- On EOF reduce production declaration_list -> 

State 4:
function_decl -> typ . IDENT LPAR RPAR BEGIN list(instruction) END [ INT EOF ]
variable_decl -> typ . IDENT SET CST SEMI [ INT EOF ]
-- On IDENT shift to state 5

State 5:
function_decl -> typ IDENT . LPAR RPAR BEGIN list(instruction) END [ INT EOF ]
variable_decl -> typ IDENT . SET CST SEMI [ INT EOF ]
-- On SET shift to state 6
-- On LPAR shift to state 9

State 6:
variable_decl -> typ IDENT SET . CST SEMI [ INT EOF ]
-- On CST shift to state 7

State 7:
variable_decl -> typ IDENT SET CST . SEMI [ INT EOF ]
-- On SEMI shift to state 8

State 8:
variable_decl -> typ IDENT SET CST SEMI . [ INT EOF ]
-- On INT reduce production variable_decl -> typ IDENT SET CST SEMI 
-- On EOF reduce production variable_decl -> typ IDENT SET CST SEMI 

State 9:
function_decl -> typ IDENT LPAR . RPAR BEGIN list(instruction) END [ INT EOF ]
-- On RPAR shift to state 10

State 10:
function_decl -> typ IDENT LPAR RPAR . BEGIN list(instruction) END [ INT EOF ]
-- On BEGIN shift to state 11

State 11:
function_decl -> typ IDENT LPAR RPAR BEGIN . list(instruction) END [ INT EOF ]
-- On RETURN shift to state 12
-- On list(instruction) shift to state 17
-- On instruction shift to state 19
-- On END reduce production list(instruction) -> 

State 12:
instruction -> RETURN . expression SEMI [ RETURN END ]
-- On CST shift to state 13
-- On BOOL_CST shift to state 14
-- On expression shift to state 15

State 13:
expression -> CST . [ SEMI ]
-- On SEMI reduce production expression -> CST 

State 14:
expression -> BOOL_CST . [ SEMI ]
-- On SEMI reduce production expression -> BOOL_CST 

State 15:
instruction -> RETURN expression . SEMI [ RETURN END ]
-- On SEMI shift to state 16

State 16:
instruction -> RETURN expression SEMI . [ RETURN END ]
-- On RETURN reduce production instruction -> RETURN expression SEMI 
-- On END reduce production instruction -> RETURN expression SEMI 

State 17:
function_decl -> typ IDENT LPAR RPAR BEGIN list(instruction) . END [ INT EOF ]
-- On END shift to state 18

State 18:
function_decl -> typ IDENT LPAR RPAR BEGIN list(instruction) END . [ INT EOF ]
-- On INT reduce production function_decl -> typ IDENT LPAR RPAR BEGIN list(instruction) END 
-- On EOF reduce production function_decl -> typ IDENT LPAR RPAR BEGIN list(instruction) END 

State 19:
list(instruction) -> instruction . list(instruction) [ END ]
-- On RETURN shift to state 12
-- On list(instruction) shift to state 20
-- On instruction shift to state 19
-- On END reduce production list(instruction) -> 

State 20:
list(instruction) -> instruction list(instruction) . [ END ]
-- On END reduce production list(instruction) -> instruction list(instruction) 

State 21:
declaration_list -> function_decl . declaration_list [ EOF ]
-- On INT shift to state 2
-- On variable_decl shift to state 3
-- On typ shift to state 4
-- On function_decl shift to state 21
-- On declaration_list shift to state 22
-- On EOF reduce production declaration_list -> 

State 22:
declaration_list -> function_decl declaration_list . [ EOF ]
-- On EOF reduce production declaration_list -> function_decl declaration_list 

State 23:
declaration_list -> variable_decl declaration_list . [ EOF ]
-- On EOF reduce production declaration_list -> variable_decl declaration_list 

State 24:
program' -> program . [ # ]
-- On # accept program

State 25:
program -> declaration_list . EOF [ # ]
-- On EOF shift to state 26

State 26:
program -> declaration_list EOF . [ # ]
-- On # reduce production program -> declaration_list EOF 

