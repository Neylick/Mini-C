State 0:
program' -> . program [ # ]
-- On error shift to state 1
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On BOOL shift to state 62
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 68
-- On typ shift to state 69
-- On simple_var_decl shift to state 125
-- On program shift to state 161
-- On global_scope_def_list shift to state 162
-- On global_scope_def shift to state 164
-- On function_decl shift to state 166
-- On EOF reduce production global_scope_def_list -> 

State 1:
program -> error . [ # ]
-- On # reduce production program -> error 

State 2:
typ -> VOID . [ IDENT ]
-- On IDENT reduce production typ -> VOID 

State 3:
variable_set -> SUB . SUB IDENT [ SEPARATOR SEMI RPAR ]
-- On SUB shift to state 4

State 4:
variable_set -> SUB SUB . IDENT [ SEPARATOR SEMI RPAR ]
-- On IDENT shift to state 5

State 5:
variable_set -> SUB SUB IDENT . [ SEPARATOR SEMI RPAR ]
-- On SEPARATOR reduce production variable_set -> SUB SUB IDENT 
-- On SEMI reduce production variable_set -> SUB SUB IDENT 
-- On RPAR reduce production variable_set -> SUB SUB IDENT 

State 6:
typ -> INT . [ IDENT ]
-- On IDENT reduce production typ -> INT 

State 7:
variable_set -> IDENT . SET expression [ SEPARATOR SEMI RPAR ]
variable_set -> IDENT . ADD ADD [ SEPARATOR SEMI RPAR ]
variable_set -> IDENT . SUB SUB [ SEPARATOR SEMI RPAR ]
-- On SUB shift to state 8
-- On SET shift to state 10
-- On ADD shift to state 60

State 8:
variable_set -> IDENT SUB . SUB [ SEPARATOR SEMI RPAR ]
-- On SUB shift to state 9

State 9:
variable_set -> IDENT SUB SUB . [ SEPARATOR SEMI RPAR ]
-- On SEPARATOR reduce production variable_set -> IDENT SUB SUB 
-- On SEMI reduce production variable_set -> IDENT SUB SUB 
-- On RPAR reduce production variable_set -> IDENT SUB SUB 

State 10:
variable_set -> IDENT SET . expression [ SEPARATOR SEMI RPAR ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 59

State 11:
expression -> LPAR . expression RPAR [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 57

State 12:
expression -> IDENT . LPAR call_list RPAR [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> IDENT . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 13
-- On XOR reduce production expression -> IDENT 
-- On SUB reduce production expression -> IDENT 
-- On SEPARATOR reduce production expression -> IDENT 
-- On SEMI reduce production expression -> IDENT 
-- On RPAR reduce production expression -> IDENT 
-- On OR reduce production expression -> IDENT 
-- On NEQ reduce production expression -> IDENT 
-- On MUL reduce production expression -> IDENT 
-- On MOD reduce production expression -> IDENT 
-- On LT reduce production expression -> IDENT 
-- On LET reduce production expression -> IDENT 
-- On GT reduce production expression -> IDENT 
-- On GET reduce production expression -> IDENT 
-- On EQ reduce production expression -> IDENT 
-- On END reduce production expression -> IDENT 
-- On DIV reduce production expression -> IDENT 
-- On BXOR reduce production expression -> IDENT 
-- On BOR reduce production expression -> IDENT 
-- On BNEQ reduce production expression -> IDENT 
-- On BAND reduce production expression -> IDENT 
-- On AND reduce production expression -> IDENT 
-- On ADD reduce production expression -> IDENT 

State 13:
expression -> IDENT LPAR . call_list RPAR [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 16
-- On call_list shift to state 55
-- On RPAR reduce production call_list -> 

State 14:
expression -> CST . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR reduce production expression -> CST 
-- On SUB reduce production expression -> CST 
-- On SEPARATOR reduce production expression -> CST 
-- On SEMI reduce production expression -> CST 
-- On RPAR reduce production expression -> CST 
-- On OR reduce production expression -> CST 
-- On NEQ reduce production expression -> CST 
-- On MUL reduce production expression -> CST 
-- On MOD reduce production expression -> CST 
-- On LT reduce production expression -> CST 
-- On LET reduce production expression -> CST 
-- On GT reduce production expression -> CST 
-- On GET reduce production expression -> CST 
-- On EQ reduce production expression -> CST 
-- On END reduce production expression -> CST 
-- On DIV reduce production expression -> CST 
-- On BXOR reduce production expression -> CST 
-- On BOR reduce production expression -> CST 
-- On BNEQ reduce production expression -> CST 
-- On BAND reduce production expression -> CST 
-- On AND reduce production expression -> CST 
-- On ADD reduce production expression -> CST 

State 15:
expression -> BOOL_CST . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR reduce production expression -> BOOL_CST 
-- On SUB reduce production expression -> BOOL_CST 
-- On SEPARATOR reduce production expression -> BOOL_CST 
-- On SEMI reduce production expression -> BOOL_CST 
-- On RPAR reduce production expression -> BOOL_CST 
-- On OR reduce production expression -> BOOL_CST 
-- On NEQ reduce production expression -> BOOL_CST 
-- On MUL reduce production expression -> BOOL_CST 
-- On MOD reduce production expression -> BOOL_CST 
-- On LT reduce production expression -> BOOL_CST 
-- On LET reduce production expression -> BOOL_CST 
-- On GT reduce production expression -> BOOL_CST 
-- On GET reduce production expression -> BOOL_CST 
-- On EQ reduce production expression -> BOOL_CST 
-- On END reduce production expression -> BOOL_CST 
-- On DIV reduce production expression -> BOOL_CST 
-- On BXOR reduce production expression -> BOOL_CST 
-- On BOR reduce production expression -> BOOL_CST 
-- On BNEQ reduce production expression -> BOOL_CST 
-- On BAND reduce production expression -> BOOL_CST 
-- On AND reduce production expression -> BOOL_CST 
-- On ADD reduce production expression -> BOOL_CST 

State 16:
call_list -> expression . [ RPAR ]
call_list -> expression . SEPARATOR call_list [ RPAR ]
expression -> expression . LT expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On SEPARATOR shift to state 53
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On RPAR reduce production call_list -> expression 

State 17:
expression -> expression XOR . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 18

State 18:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression XOR expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression XOR expression 
-- On SUB reduce production expression -> expression XOR expression 
-- On SEPARATOR reduce production expression -> expression XOR expression 
-- On SEMI reduce production expression -> expression XOR expression 
-- On RPAR reduce production expression -> expression XOR expression 
-- On OR reduce production expression -> expression XOR expression 
-- On NEQ reduce production expression -> expression XOR expression 
-- On MUL reduce production expression -> expression XOR expression 
-- On MOD reduce production expression -> expression XOR expression 
-- On LT reduce production expression -> expression XOR expression 
-- On LET reduce production expression -> expression XOR expression 
-- On GT reduce production expression -> expression XOR expression 
-- On GET reduce production expression -> expression XOR expression 
-- On EQ reduce production expression -> expression XOR expression 
-- On END reduce production expression -> expression XOR expression 
-- On DIV reduce production expression -> expression XOR expression 
-- On BXOR reduce production expression -> expression XOR expression 
-- On BOR reduce production expression -> expression XOR expression 
-- On BNEQ reduce production expression -> expression XOR expression 
-- On BAND reduce production expression -> expression XOR expression 
-- On AND reduce production expression -> expression XOR expression 
-- On ADD reduce production expression -> expression XOR expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 19:
expression -> expression SUB . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 20

State 20:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression SUB expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression SUB expression 
-- On SUB reduce production expression -> expression SUB expression 
-- On SEPARATOR reduce production expression -> expression SUB expression 
-- On SEMI reduce production expression -> expression SUB expression 
-- On RPAR reduce production expression -> expression SUB expression 
-- On OR reduce production expression -> expression SUB expression 
-- On NEQ reduce production expression -> expression SUB expression 
-- On MUL reduce production expression -> expression SUB expression 
-- On MOD reduce production expression -> expression SUB expression 
-- On LT reduce production expression -> expression SUB expression 
-- On LET reduce production expression -> expression SUB expression 
-- On GT reduce production expression -> expression SUB expression 
-- On GET reduce production expression -> expression SUB expression 
-- On EQ reduce production expression -> expression SUB expression 
-- On END reduce production expression -> expression SUB expression 
-- On DIV reduce production expression -> expression SUB expression 
-- On BXOR reduce production expression -> expression SUB expression 
-- On BOR reduce production expression -> expression SUB expression 
-- On BNEQ reduce production expression -> expression SUB expression 
-- On BAND reduce production expression -> expression SUB expression 
-- On AND reduce production expression -> expression SUB expression 
-- On ADD reduce production expression -> expression SUB expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 21:
expression -> expression OR . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 22

State 22:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression OR expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression OR expression 
-- On SUB reduce production expression -> expression OR expression 
-- On SEPARATOR reduce production expression -> expression OR expression 
-- On SEMI reduce production expression -> expression OR expression 
-- On RPAR reduce production expression -> expression OR expression 
-- On OR reduce production expression -> expression OR expression 
-- On NEQ reduce production expression -> expression OR expression 
-- On MUL reduce production expression -> expression OR expression 
-- On MOD reduce production expression -> expression OR expression 
-- On LT reduce production expression -> expression OR expression 
-- On LET reduce production expression -> expression OR expression 
-- On GT reduce production expression -> expression OR expression 
-- On GET reduce production expression -> expression OR expression 
-- On EQ reduce production expression -> expression OR expression 
-- On END reduce production expression -> expression OR expression 
-- On DIV reduce production expression -> expression OR expression 
-- On BXOR reduce production expression -> expression OR expression 
-- On BOR reduce production expression -> expression OR expression 
-- On BNEQ reduce production expression -> expression OR expression 
-- On BAND reduce production expression -> expression OR expression 
-- On AND reduce production expression -> expression OR expression 
-- On ADD reduce production expression -> expression OR expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 23:
expression -> expression NEQ . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 24

State 24:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression NEQ expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression NEQ expression 
-- On SUB reduce production expression -> expression NEQ expression 
-- On SEPARATOR reduce production expression -> expression NEQ expression 
-- On SEMI reduce production expression -> expression NEQ expression 
-- On RPAR reduce production expression -> expression NEQ expression 
-- On OR reduce production expression -> expression NEQ expression 
-- On NEQ reduce production expression -> expression NEQ expression 
-- On MUL reduce production expression -> expression NEQ expression 
-- On MOD reduce production expression -> expression NEQ expression 
-- On LT reduce production expression -> expression NEQ expression 
-- On LET reduce production expression -> expression NEQ expression 
-- On GT reduce production expression -> expression NEQ expression 
-- On GET reduce production expression -> expression NEQ expression 
-- On EQ reduce production expression -> expression NEQ expression 
-- On END reduce production expression -> expression NEQ expression 
-- On DIV reduce production expression -> expression NEQ expression 
-- On BXOR reduce production expression -> expression NEQ expression 
-- On BOR reduce production expression -> expression NEQ expression 
-- On BNEQ reduce production expression -> expression NEQ expression 
-- On BAND reduce production expression -> expression NEQ expression 
-- On AND reduce production expression -> expression NEQ expression 
-- On ADD reduce production expression -> expression NEQ expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 25:
expression -> expression MUL . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 26

State 26:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression MUL expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression MUL expression 
-- On SUB reduce production expression -> expression MUL expression 
-- On SEPARATOR reduce production expression -> expression MUL expression 
-- On SEMI reduce production expression -> expression MUL expression 
-- On RPAR reduce production expression -> expression MUL expression 
-- On OR reduce production expression -> expression MUL expression 
-- On NEQ reduce production expression -> expression MUL expression 
-- On MUL reduce production expression -> expression MUL expression 
-- On MOD reduce production expression -> expression MUL expression 
-- On LT reduce production expression -> expression MUL expression 
-- On LET reduce production expression -> expression MUL expression 
-- On GT reduce production expression -> expression MUL expression 
-- On GET reduce production expression -> expression MUL expression 
-- On EQ reduce production expression -> expression MUL expression 
-- On END reduce production expression -> expression MUL expression 
-- On DIV reduce production expression -> expression MUL expression 
-- On BXOR reduce production expression -> expression MUL expression 
-- On BOR reduce production expression -> expression MUL expression 
-- On BNEQ reduce production expression -> expression MUL expression 
-- On BAND reduce production expression -> expression MUL expression 
-- On AND reduce production expression -> expression MUL expression 
-- On ADD reduce production expression -> expression MUL expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 27:
expression -> expression MOD . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 28

State 28:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression MOD expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression MOD expression 
-- On SUB reduce production expression -> expression MOD expression 
-- On SEPARATOR reduce production expression -> expression MOD expression 
-- On SEMI reduce production expression -> expression MOD expression 
-- On RPAR reduce production expression -> expression MOD expression 
-- On OR reduce production expression -> expression MOD expression 
-- On NEQ reduce production expression -> expression MOD expression 
-- On MUL reduce production expression -> expression MOD expression 
-- On MOD reduce production expression -> expression MOD expression 
-- On LT reduce production expression -> expression MOD expression 
-- On LET reduce production expression -> expression MOD expression 
-- On GT reduce production expression -> expression MOD expression 
-- On GET reduce production expression -> expression MOD expression 
-- On EQ reduce production expression -> expression MOD expression 
-- On END reduce production expression -> expression MOD expression 
-- On DIV reduce production expression -> expression MOD expression 
-- On BXOR reduce production expression -> expression MOD expression 
-- On BOR reduce production expression -> expression MOD expression 
-- On BNEQ reduce production expression -> expression MOD expression 
-- On BAND reduce production expression -> expression MOD expression 
-- On AND reduce production expression -> expression MOD expression 
-- On ADD reduce production expression -> expression MOD expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 29:
expression -> expression LT . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 30

State 30:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression LT expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression LT expression 
-- On SUB reduce production expression -> expression LT expression 
-- On SEPARATOR reduce production expression -> expression LT expression 
-- On SEMI reduce production expression -> expression LT expression 
-- On RPAR reduce production expression -> expression LT expression 
-- On OR reduce production expression -> expression LT expression 
-- On NEQ reduce production expression -> expression LT expression 
-- On MUL reduce production expression -> expression LT expression 
-- On MOD reduce production expression -> expression LT expression 
-- On LT reduce production expression -> expression LT expression 
-- On LET reduce production expression -> expression LT expression 
-- On GT reduce production expression -> expression LT expression 
-- On GET reduce production expression -> expression LT expression 
-- On EQ reduce production expression -> expression LT expression 
-- On END reduce production expression -> expression LT expression 
-- On DIV reduce production expression -> expression LT expression 
-- On BXOR reduce production expression -> expression LT expression 
-- On BOR reduce production expression -> expression LT expression 
-- On BNEQ reduce production expression -> expression LT expression 
-- On BAND reduce production expression -> expression LT expression 
-- On AND reduce production expression -> expression LT expression 
-- On ADD reduce production expression -> expression LT expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 31:
expression -> expression LET . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 32

State 32:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression LET expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression LET expression 
-- On SUB reduce production expression -> expression LET expression 
-- On SEPARATOR reduce production expression -> expression LET expression 
-- On SEMI reduce production expression -> expression LET expression 
-- On RPAR reduce production expression -> expression LET expression 
-- On OR reduce production expression -> expression LET expression 
-- On NEQ reduce production expression -> expression LET expression 
-- On MUL reduce production expression -> expression LET expression 
-- On MOD reduce production expression -> expression LET expression 
-- On LT reduce production expression -> expression LET expression 
-- On LET reduce production expression -> expression LET expression 
-- On GT reduce production expression -> expression LET expression 
-- On GET reduce production expression -> expression LET expression 
-- On EQ reduce production expression -> expression LET expression 
-- On END reduce production expression -> expression LET expression 
-- On DIV reduce production expression -> expression LET expression 
-- On BXOR reduce production expression -> expression LET expression 
-- On BOR reduce production expression -> expression LET expression 
-- On BNEQ reduce production expression -> expression LET expression 
-- On BAND reduce production expression -> expression LET expression 
-- On AND reduce production expression -> expression LET expression 
-- On ADD reduce production expression -> expression LET expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 33:
expression -> expression GT . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 34

State 34:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression GT expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression GT expression 
-- On SUB reduce production expression -> expression GT expression 
-- On SEPARATOR reduce production expression -> expression GT expression 
-- On SEMI reduce production expression -> expression GT expression 
-- On RPAR reduce production expression -> expression GT expression 
-- On OR reduce production expression -> expression GT expression 
-- On NEQ reduce production expression -> expression GT expression 
-- On MUL reduce production expression -> expression GT expression 
-- On MOD reduce production expression -> expression GT expression 
-- On LT reduce production expression -> expression GT expression 
-- On LET reduce production expression -> expression GT expression 
-- On GT reduce production expression -> expression GT expression 
-- On GET reduce production expression -> expression GT expression 
-- On EQ reduce production expression -> expression GT expression 
-- On END reduce production expression -> expression GT expression 
-- On DIV reduce production expression -> expression GT expression 
-- On BXOR reduce production expression -> expression GT expression 
-- On BOR reduce production expression -> expression GT expression 
-- On BNEQ reduce production expression -> expression GT expression 
-- On BAND reduce production expression -> expression GT expression 
-- On AND reduce production expression -> expression GT expression 
-- On ADD reduce production expression -> expression GT expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 35:
expression -> expression GET . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 36

State 36:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression GET expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression GET expression 
-- On SUB reduce production expression -> expression GET expression 
-- On SEPARATOR reduce production expression -> expression GET expression 
-- On SEMI reduce production expression -> expression GET expression 
-- On RPAR reduce production expression -> expression GET expression 
-- On OR reduce production expression -> expression GET expression 
-- On NEQ reduce production expression -> expression GET expression 
-- On MUL reduce production expression -> expression GET expression 
-- On MOD reduce production expression -> expression GET expression 
-- On LT reduce production expression -> expression GET expression 
-- On LET reduce production expression -> expression GET expression 
-- On GT reduce production expression -> expression GET expression 
-- On GET reduce production expression -> expression GET expression 
-- On EQ reduce production expression -> expression GET expression 
-- On END reduce production expression -> expression GET expression 
-- On DIV reduce production expression -> expression GET expression 
-- On BXOR reduce production expression -> expression GET expression 
-- On BOR reduce production expression -> expression GET expression 
-- On BNEQ reduce production expression -> expression GET expression 
-- On BAND reduce production expression -> expression GET expression 
-- On AND reduce production expression -> expression GET expression 
-- On ADD reduce production expression -> expression GET expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 37:
expression -> expression EQ . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 38

State 38:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression EQ expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression EQ expression 
-- On SUB reduce production expression -> expression EQ expression 
-- On SEPARATOR reduce production expression -> expression EQ expression 
-- On SEMI reduce production expression -> expression EQ expression 
-- On RPAR reduce production expression -> expression EQ expression 
-- On OR reduce production expression -> expression EQ expression 
-- On NEQ reduce production expression -> expression EQ expression 
-- On MUL reduce production expression -> expression EQ expression 
-- On MOD reduce production expression -> expression EQ expression 
-- On LT reduce production expression -> expression EQ expression 
-- On LET reduce production expression -> expression EQ expression 
-- On GT reduce production expression -> expression EQ expression 
-- On GET reduce production expression -> expression EQ expression 
-- On EQ reduce production expression -> expression EQ expression 
-- On END reduce production expression -> expression EQ expression 
-- On DIV reduce production expression -> expression EQ expression 
-- On BXOR reduce production expression -> expression EQ expression 
-- On BOR reduce production expression -> expression EQ expression 
-- On BNEQ reduce production expression -> expression EQ expression 
-- On BAND reduce production expression -> expression EQ expression 
-- On AND reduce production expression -> expression EQ expression 
-- On ADD reduce production expression -> expression EQ expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 39:
expression -> expression DIV . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 40

State 40:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression DIV expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression DIV expression 
-- On SUB reduce production expression -> expression DIV expression 
-- On SEPARATOR reduce production expression -> expression DIV expression 
-- On SEMI reduce production expression -> expression DIV expression 
-- On RPAR reduce production expression -> expression DIV expression 
-- On OR reduce production expression -> expression DIV expression 
-- On NEQ reduce production expression -> expression DIV expression 
-- On MUL reduce production expression -> expression DIV expression 
-- On MOD reduce production expression -> expression DIV expression 
-- On LT reduce production expression -> expression DIV expression 
-- On LET reduce production expression -> expression DIV expression 
-- On GT reduce production expression -> expression DIV expression 
-- On GET reduce production expression -> expression DIV expression 
-- On EQ reduce production expression -> expression DIV expression 
-- On END reduce production expression -> expression DIV expression 
-- On DIV reduce production expression -> expression DIV expression 
-- On BXOR reduce production expression -> expression DIV expression 
-- On BOR reduce production expression -> expression DIV expression 
-- On BNEQ reduce production expression -> expression DIV expression 
-- On BAND reduce production expression -> expression DIV expression 
-- On AND reduce production expression -> expression DIV expression 
-- On ADD reduce production expression -> expression DIV expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 41:
expression -> expression BXOR . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 42

State 42:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression BXOR expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression BXOR expression 
-- On SUB reduce production expression -> expression BXOR expression 
-- On SEPARATOR reduce production expression -> expression BXOR expression 
-- On SEMI reduce production expression -> expression BXOR expression 
-- On RPAR reduce production expression -> expression BXOR expression 
-- On OR reduce production expression -> expression BXOR expression 
-- On NEQ reduce production expression -> expression BXOR expression 
-- On MUL reduce production expression -> expression BXOR expression 
-- On MOD reduce production expression -> expression BXOR expression 
-- On LT reduce production expression -> expression BXOR expression 
-- On LET reduce production expression -> expression BXOR expression 
-- On GT reduce production expression -> expression BXOR expression 
-- On GET reduce production expression -> expression BXOR expression 
-- On EQ reduce production expression -> expression BXOR expression 
-- On END reduce production expression -> expression BXOR expression 
-- On DIV reduce production expression -> expression BXOR expression 
-- On BXOR reduce production expression -> expression BXOR expression 
-- On BOR reduce production expression -> expression BXOR expression 
-- On BNEQ reduce production expression -> expression BXOR expression 
-- On BAND reduce production expression -> expression BXOR expression 
-- On AND reduce production expression -> expression BXOR expression 
-- On ADD reduce production expression -> expression BXOR expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 43:
expression -> expression BOR . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 44

State 44:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression BOR expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression BOR expression 
-- On SUB reduce production expression -> expression BOR expression 
-- On SEPARATOR reduce production expression -> expression BOR expression 
-- On SEMI reduce production expression -> expression BOR expression 
-- On RPAR reduce production expression -> expression BOR expression 
-- On OR reduce production expression -> expression BOR expression 
-- On NEQ reduce production expression -> expression BOR expression 
-- On MUL reduce production expression -> expression BOR expression 
-- On MOD reduce production expression -> expression BOR expression 
-- On LT reduce production expression -> expression BOR expression 
-- On LET reduce production expression -> expression BOR expression 
-- On GT reduce production expression -> expression BOR expression 
-- On GET reduce production expression -> expression BOR expression 
-- On EQ reduce production expression -> expression BOR expression 
-- On END reduce production expression -> expression BOR expression 
-- On DIV reduce production expression -> expression BOR expression 
-- On BXOR reduce production expression -> expression BOR expression 
-- On BOR reduce production expression -> expression BOR expression 
-- On BNEQ reduce production expression -> expression BOR expression 
-- On BAND reduce production expression -> expression BOR expression 
-- On AND reduce production expression -> expression BOR expression 
-- On ADD reduce production expression -> expression BOR expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 45:
expression -> expression BNEQ . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 46

State 46:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression BNEQ expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression BNEQ expression 
-- On SUB reduce production expression -> expression BNEQ expression 
-- On SEPARATOR reduce production expression -> expression BNEQ expression 
-- On SEMI reduce production expression -> expression BNEQ expression 
-- On RPAR reduce production expression -> expression BNEQ expression 
-- On OR reduce production expression -> expression BNEQ expression 
-- On NEQ reduce production expression -> expression BNEQ expression 
-- On MUL reduce production expression -> expression BNEQ expression 
-- On MOD reduce production expression -> expression BNEQ expression 
-- On LT reduce production expression -> expression BNEQ expression 
-- On LET reduce production expression -> expression BNEQ expression 
-- On GT reduce production expression -> expression BNEQ expression 
-- On GET reduce production expression -> expression BNEQ expression 
-- On EQ reduce production expression -> expression BNEQ expression 
-- On END reduce production expression -> expression BNEQ expression 
-- On DIV reduce production expression -> expression BNEQ expression 
-- On BXOR reduce production expression -> expression BNEQ expression 
-- On BOR reduce production expression -> expression BNEQ expression 
-- On BNEQ reduce production expression -> expression BNEQ expression 
-- On BAND reduce production expression -> expression BNEQ expression 
-- On AND reduce production expression -> expression BNEQ expression 
-- On ADD reduce production expression -> expression BNEQ expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 47:
expression -> expression BAND . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 48

State 48:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression BAND expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression BAND expression 
-- On SUB reduce production expression -> expression BAND expression 
-- On SEPARATOR reduce production expression -> expression BAND expression 
-- On SEMI reduce production expression -> expression BAND expression 
-- On RPAR reduce production expression -> expression BAND expression 
-- On OR reduce production expression -> expression BAND expression 
-- On NEQ reduce production expression -> expression BAND expression 
-- On MUL reduce production expression -> expression BAND expression 
-- On MOD reduce production expression -> expression BAND expression 
-- On LT reduce production expression -> expression BAND expression 
-- On LET reduce production expression -> expression BAND expression 
-- On GT reduce production expression -> expression BAND expression 
-- On GET reduce production expression -> expression BAND expression 
-- On EQ reduce production expression -> expression BAND expression 
-- On END reduce production expression -> expression BAND expression 
-- On DIV reduce production expression -> expression BAND expression 
-- On BXOR reduce production expression -> expression BAND expression 
-- On BOR reduce production expression -> expression BAND expression 
-- On BNEQ reduce production expression -> expression BAND expression 
-- On BAND reduce production expression -> expression BAND expression 
-- On AND reduce production expression -> expression BAND expression 
-- On ADD reduce production expression -> expression BAND expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 49:
expression -> expression AND . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 50

State 50:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression AND expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression AND expression 
-- On SUB reduce production expression -> expression AND expression 
-- On SEPARATOR reduce production expression -> expression AND expression 
-- On SEMI reduce production expression -> expression AND expression 
-- On RPAR reduce production expression -> expression AND expression 
-- On OR reduce production expression -> expression AND expression 
-- On NEQ reduce production expression -> expression AND expression 
-- On MUL reduce production expression -> expression AND expression 
-- On MOD reduce production expression -> expression AND expression 
-- On LT reduce production expression -> expression AND expression 
-- On LET reduce production expression -> expression AND expression 
-- On GT reduce production expression -> expression AND expression 
-- On GET reduce production expression -> expression AND expression 
-- On EQ reduce production expression -> expression AND expression 
-- On END reduce production expression -> expression AND expression 
-- On DIV reduce production expression -> expression AND expression 
-- On BXOR reduce production expression -> expression AND expression 
-- On BOR reduce production expression -> expression AND expression 
-- On BNEQ reduce production expression -> expression AND expression 
-- On BAND reduce production expression -> expression AND expression 
-- On AND reduce production expression -> expression AND expression 
-- On ADD reduce production expression -> expression AND expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 51:
expression -> expression ADD . expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 52

State 52:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression ADD expression . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On XOR reduce production expression -> expression ADD expression 
-- On SUB reduce production expression -> expression ADD expression 
-- On SEPARATOR reduce production expression -> expression ADD expression 
-- On SEMI reduce production expression -> expression ADD expression 
-- On RPAR reduce production expression -> expression ADD expression 
-- On OR reduce production expression -> expression ADD expression 
-- On NEQ reduce production expression -> expression ADD expression 
-- On MUL reduce production expression -> expression ADD expression 
-- On MOD reduce production expression -> expression ADD expression 
-- On LT reduce production expression -> expression ADD expression 
-- On LET reduce production expression -> expression ADD expression 
-- On GT reduce production expression -> expression ADD expression 
-- On GET reduce production expression -> expression ADD expression 
-- On EQ reduce production expression -> expression ADD expression 
-- On END reduce production expression -> expression ADD expression 
-- On DIV reduce production expression -> expression ADD expression 
-- On BXOR reduce production expression -> expression ADD expression 
-- On BOR reduce production expression -> expression ADD expression 
-- On BNEQ reduce production expression -> expression ADD expression 
-- On BAND reduce production expression -> expression ADD expression 
-- On AND reduce production expression -> expression ADD expression 
-- On ADD reduce production expression -> expression ADD expression 
** Conflict on XOR SUB OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD

State 53:
call_list -> expression SEPARATOR . call_list [ RPAR ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 16
-- On call_list shift to state 54
-- On RPAR reduce production call_list -> 

State 54:
call_list -> expression SEPARATOR call_list . [ RPAR ]
-- On RPAR reduce production call_list -> expression SEPARATOR call_list 

State 55:
expression -> IDENT LPAR call_list . RPAR [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On RPAR shift to state 56

State 56:
expression -> IDENT LPAR call_list RPAR . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR reduce production expression -> IDENT LPAR call_list RPAR 
-- On SUB reduce production expression -> IDENT LPAR call_list RPAR 
-- On SEPARATOR reduce production expression -> IDENT LPAR call_list RPAR 
-- On SEMI reduce production expression -> IDENT LPAR call_list RPAR 
-- On RPAR reduce production expression -> IDENT LPAR call_list RPAR 
-- On OR reduce production expression -> IDENT LPAR call_list RPAR 
-- On NEQ reduce production expression -> IDENT LPAR call_list RPAR 
-- On MUL reduce production expression -> IDENT LPAR call_list RPAR 
-- On MOD reduce production expression -> IDENT LPAR call_list RPAR 
-- On LT reduce production expression -> IDENT LPAR call_list RPAR 
-- On LET reduce production expression -> IDENT LPAR call_list RPAR 
-- On GT reduce production expression -> IDENT LPAR call_list RPAR 
-- On GET reduce production expression -> IDENT LPAR call_list RPAR 
-- On EQ reduce production expression -> IDENT LPAR call_list RPAR 
-- On END reduce production expression -> IDENT LPAR call_list RPAR 
-- On DIV reduce production expression -> IDENT LPAR call_list RPAR 
-- On BXOR reduce production expression -> IDENT LPAR call_list RPAR 
-- On BOR reduce production expression -> IDENT LPAR call_list RPAR 
-- On BNEQ reduce production expression -> IDENT LPAR call_list RPAR 
-- On BAND reduce production expression -> IDENT LPAR call_list RPAR 
-- On AND reduce production expression -> IDENT LPAR call_list RPAR 
-- On ADD reduce production expression -> IDENT LPAR call_list RPAR 

State 57:
expression -> LPAR expression . RPAR [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LT expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On RPAR shift to state 58
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51

State 58:
expression -> LPAR expression RPAR . [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
-- On XOR reduce production expression -> LPAR expression RPAR 
-- On SUB reduce production expression -> LPAR expression RPAR 
-- On SEPARATOR reduce production expression -> LPAR expression RPAR 
-- On SEMI reduce production expression -> LPAR expression RPAR 
-- On RPAR reduce production expression -> LPAR expression RPAR 
-- On OR reduce production expression -> LPAR expression RPAR 
-- On NEQ reduce production expression -> LPAR expression RPAR 
-- On MUL reduce production expression -> LPAR expression RPAR 
-- On MOD reduce production expression -> LPAR expression RPAR 
-- On LT reduce production expression -> LPAR expression RPAR 
-- On LET reduce production expression -> LPAR expression RPAR 
-- On GT reduce production expression -> LPAR expression RPAR 
-- On GET reduce production expression -> LPAR expression RPAR 
-- On EQ reduce production expression -> LPAR expression RPAR 
-- On END reduce production expression -> LPAR expression RPAR 
-- On DIV reduce production expression -> LPAR expression RPAR 
-- On BXOR reduce production expression -> LPAR expression RPAR 
-- On BOR reduce production expression -> LPAR expression RPAR 
-- On BNEQ reduce production expression -> LPAR expression RPAR 
-- On BAND reduce production expression -> LPAR expression RPAR 
-- On AND reduce production expression -> LPAR expression RPAR 
-- On ADD reduce production expression -> LPAR expression RPAR 

State 59:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
variable_set -> IDENT SET expression . [ SEPARATOR SEMI RPAR ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On SEPARATOR reduce production variable_set -> IDENT SET expression 
-- On SEMI reduce production variable_set -> IDENT SET expression 
-- On RPAR reduce production variable_set -> IDENT SET expression 

State 60:
variable_set -> IDENT ADD . ADD [ SEPARATOR SEMI RPAR ]
-- On ADD shift to state 61

State 61:
variable_set -> IDENT ADD ADD . [ SEPARATOR SEMI RPAR ]
-- On SEPARATOR reduce production variable_set -> IDENT ADD ADD 
-- On SEMI reduce production variable_set -> IDENT ADD ADD 
-- On RPAR reduce production variable_set -> IDENT ADD ADD 

State 62:
typ -> BOOL . [ IDENT ]
-- On IDENT reduce production typ -> BOOL 

State 63:
variable_set -> ADD . ADD IDENT [ SEPARATOR SEMI RPAR ]
-- On ADD shift to state 64

State 64:
variable_set -> ADD ADD . IDENT [ SEPARATOR SEMI RPAR ]
-- On IDENT shift to state 65

State 65:
variable_set -> ADD ADD IDENT . [ SEPARATOR SEMI RPAR ]
-- On SEPARATOR reduce production variable_set -> ADD ADD IDENT 
-- On SEMI reduce production variable_set -> ADD ADD IDENT 
-- On RPAR reduce production variable_set -> ADD ADD IDENT 

State 66:
variable_decl_set -> variable_set . SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR EOF END ELSE DO BOOL BEGIN ADD ]
-- On SEMI shift to state 67

State 67:
variable_decl_set -> variable_set SEMI . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR EOF END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production variable_decl_set -> variable_set SEMI 
-- On VOID reduce production variable_decl_set -> variable_set SEMI 
-- On SUB reduce production variable_decl_set -> variable_set SEMI 
-- On RETURN reduce production variable_decl_set -> variable_set SEMI 
-- On PUTCHAR reduce production variable_decl_set -> variable_set SEMI 
-- On INT reduce production variable_decl_set -> variable_set SEMI 
-- On IF reduce production variable_decl_set -> variable_set SEMI 
-- On IDENT reduce production variable_decl_set -> variable_set SEMI 
-- On FOR reduce production variable_decl_set -> variable_set SEMI 
-- On EOF reduce production variable_decl_set -> variable_set SEMI 
-- On END reduce production variable_decl_set -> variable_set SEMI 
-- On ELSE reduce production variable_decl_set -> variable_set SEMI 
-- On DO reduce production variable_decl_set -> variable_set SEMI 
-- On BOOL reduce production variable_decl_set -> variable_set SEMI 
-- On BEGIN reduce production variable_decl_set -> variable_set SEMI 
-- On ADD reduce production variable_decl_set -> variable_set SEMI 

State 68:
global_scope_def -> variable_decl_set . [ VOID SUB INT IDENT EOF BOOL ADD ]
-- On VOID reduce production global_scope_def -> variable_decl_set 
-- On SUB reduce production global_scope_def -> variable_decl_set 
-- On INT reduce production global_scope_def -> variable_decl_set 
-- On IDENT reduce production global_scope_def -> variable_decl_set 
-- On EOF reduce production global_scope_def -> variable_decl_set 
-- On BOOL reduce production global_scope_def -> variable_decl_set 
-- On ADD reduce production global_scope_def -> variable_decl_set 

State 69:
function_decl -> typ . IDENT LPAR parameter_list RPAR BEGIN list(instruction) END [ VOID SUB INT IDENT EOF BOOL ADD ]
simple_var_decl -> typ . IDENT [ SEMI ]
variable_set -> typ . IDENT SET expression [ SEMI ]
-- On IDENT shift to state 70

State 70:
function_decl -> typ IDENT . LPAR parameter_list RPAR BEGIN list(instruction) END [ VOID SUB INT IDENT EOF BOOL ADD ]
simple_var_decl -> typ IDENT . [ SEMI ]
variable_set -> typ IDENT . SET expression [ SEMI ]
-- On SET shift to state 71
-- On LPAR shift to state 73
-- On SEMI reduce production simple_var_decl -> typ IDENT 

State 71:
variable_set -> typ IDENT SET . expression [ SEPARATOR SEMI RPAR ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 72

State 72:
expression -> expression . LT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEPARATOR SEMI RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
variable_set -> typ IDENT SET expression . [ SEPARATOR SEMI RPAR ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51
-- On SEPARATOR reduce production variable_set -> typ IDENT SET expression 
-- On SEMI reduce production variable_set -> typ IDENT SET expression 
-- On RPAR reduce production variable_set -> typ IDENT SET expression 

State 73:
function_decl -> typ IDENT LPAR . parameter_list RPAR BEGIN list(instruction) END [ VOID SUB INT IDENT EOF BOOL ADD ]
-- On VOID shift to state 2
-- On INT shift to state 6
-- On BOOL shift to state 62
-- On typ shift to state 74
-- On simple_var_decl shift to state 76
-- On parameter_list shift to state 79
-- On RPAR reduce production parameter_list -> 

State 74:
simple_var_decl -> typ . IDENT [ SEPARATOR RPAR ]
-- On IDENT shift to state 75

State 75:
simple_var_decl -> typ IDENT . [ SEPARATOR RPAR ]
-- On SEPARATOR reduce production simple_var_decl -> typ IDENT 
-- On RPAR reduce production simple_var_decl -> typ IDENT 

State 76:
parameter_list -> simple_var_decl . [ RPAR ]
parameter_list -> simple_var_decl . SEPARATOR parameter_list [ RPAR ]
-- On SEPARATOR shift to state 77
-- On RPAR reduce production parameter_list -> simple_var_decl 

State 77:
parameter_list -> simple_var_decl SEPARATOR . parameter_list [ RPAR ]
-- On VOID shift to state 2
-- On INT shift to state 6
-- On BOOL shift to state 62
-- On typ shift to state 74
-- On simple_var_decl shift to state 76
-- On parameter_list shift to state 78
-- On RPAR reduce production parameter_list -> 

State 78:
parameter_list -> simple_var_decl SEPARATOR parameter_list . [ RPAR ]
-- On RPAR reduce production parameter_list -> simple_var_decl SEPARATOR parameter_list 

State 79:
function_decl -> typ IDENT LPAR parameter_list . RPAR BEGIN list(instruction) END [ VOID SUB INT IDENT EOF BOOL ADD ]
-- On RPAR shift to state 80

State 80:
function_decl -> typ IDENT LPAR parameter_list RPAR . BEGIN list(instruction) END [ VOID SUB INT IDENT EOF BOOL ADD ]
-- On BEGIN shift to state 81

State 81:
function_decl -> typ IDENT LPAR parameter_list RPAR BEGIN . list(instruction) END [ VOID SUB INT IDENT EOF BOOL ADD ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 121
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On list(instruction) shift to state 159
-- On instruction shift to state 129
-- On END reduce production list(instruction) -> 

State 82:
instruction -> WHILE . LPAR expression RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> WHILE . LPAR expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On LPAR shift to state 83

State 83:
instruction -> WHILE LPAR . expression RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> WHILE LPAR . expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 84

State 84:
expression -> expression . LT expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
instruction -> WHILE LPAR expression . RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> WHILE LPAR expression . RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On RPAR shift to state 85
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51

State 85:
instruction -> WHILE LPAR expression RPAR . BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> WHILE LPAR expression RPAR . SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On SEMI shift to state 86
-- On BEGIN shift to state 87

State 86:
instruction -> WHILE LPAR expression RPAR SEMI . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On VOID reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On SUB reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On RETURN reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On PUTCHAR reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On INT reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On IF reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On IDENT reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On FOR reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On END reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On ELSE reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On DO reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On BOOL reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On BEGIN reduce production instruction -> WHILE LPAR expression RPAR SEMI 
-- On ADD reduce production instruction -> WHILE LPAR expression RPAR SEMI 

State 87:
instruction -> WHILE LPAR expression RPAR BEGIN . list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 121
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On list(instruction) shift to state 157
-- On instruction shift to state 129
-- On END reduce production list(instruction) -> 

State 88:
instruction -> RETURN . expression SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> RETURN . BEGIN expression END SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> RETURN . SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On SEMI shift to state 89
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On BEGIN shift to state 90
-- On expression shift to state 94

State 89:
instruction -> RETURN SEMI . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> RETURN SEMI 
-- On VOID reduce production instruction -> RETURN SEMI 
-- On SUB reduce production instruction -> RETURN SEMI 
-- On RETURN reduce production instruction -> RETURN SEMI 
-- On PUTCHAR reduce production instruction -> RETURN SEMI 
-- On INT reduce production instruction -> RETURN SEMI 
-- On IF reduce production instruction -> RETURN SEMI 
-- On IDENT reduce production instruction -> RETURN SEMI 
-- On FOR reduce production instruction -> RETURN SEMI 
-- On END reduce production instruction -> RETURN SEMI 
-- On ELSE reduce production instruction -> RETURN SEMI 
-- On DO reduce production instruction -> RETURN SEMI 
-- On BOOL reduce production instruction -> RETURN SEMI 
-- On BEGIN reduce production instruction -> RETURN SEMI 
-- On ADD reduce production instruction -> RETURN SEMI 

State 90:
instruction -> RETURN BEGIN . expression END SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 91

State 91:
expression -> expression . LT expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB OR NEQ MUL MOD LT LET GT GET EQ END DIV BXOR BOR BNEQ BAND AND ADD ]
instruction -> RETURN BEGIN expression . END SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On END shift to state 92
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51

State 92:
instruction -> RETURN BEGIN expression END . SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On SEMI shift to state 93

State 93:
instruction -> RETURN BEGIN expression END SEMI . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On VOID reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On SUB reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On RETURN reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On PUTCHAR reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On INT reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On IF reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On IDENT reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On FOR reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On END reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On ELSE reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On DO reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On BOOL reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On BEGIN reduce production instruction -> RETURN BEGIN expression END SEMI 
-- On ADD reduce production instruction -> RETURN BEGIN expression END SEMI 

State 94:
expression -> expression . LT expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
instruction -> RETURN expression . SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On SEMI shift to state 95
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51

State 95:
instruction -> RETURN expression SEMI . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> RETURN expression SEMI 
-- On VOID reduce production instruction -> RETURN expression SEMI 
-- On SUB reduce production instruction -> RETURN expression SEMI 
-- On RETURN reduce production instruction -> RETURN expression SEMI 
-- On PUTCHAR reduce production instruction -> RETURN expression SEMI 
-- On INT reduce production instruction -> RETURN expression SEMI 
-- On IF reduce production instruction -> RETURN expression SEMI 
-- On IDENT reduce production instruction -> RETURN expression SEMI 
-- On FOR reduce production instruction -> RETURN expression SEMI 
-- On END reduce production instruction -> RETURN expression SEMI 
-- On ELSE reduce production instruction -> RETURN expression SEMI 
-- On DO reduce production instruction -> RETURN expression SEMI 
-- On BOOL reduce production instruction -> RETURN expression SEMI 
-- On BEGIN reduce production instruction -> RETURN expression SEMI 
-- On ADD reduce production instruction -> RETURN expression SEMI 

State 96:
instruction -> PUTCHAR . LPAR expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On LPAR shift to state 97

State 97:
instruction -> PUTCHAR LPAR . expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 98

State 98:
expression -> expression . LT expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
instruction -> PUTCHAR LPAR expression . RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On RPAR shift to state 99
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51

State 99:
instruction -> PUTCHAR LPAR expression RPAR . SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On SEMI shift to state 100

State 100:
instruction -> PUTCHAR LPAR expression RPAR SEMI . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On VOID reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On SUB reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On RETURN reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On PUTCHAR reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On INT reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On IF reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On IDENT reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On FOR reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On END reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On ELSE reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On DO reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On BOOL reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On BEGIN reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 
-- On ADD reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI 

State 101:
instruction -> IF . LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF . LPAR expression RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF . LPAR expression RPAR instruction ELSE instruction [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF . LPAR expression RPAR instruction [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF . LPAR expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On LPAR shift to state 102

State 102:
instruction -> IF LPAR . expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR . expression RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR . expression RPAR instruction ELSE instruction [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR . expression RPAR instruction [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR . expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 103

State 103:
expression -> expression . LT expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
instruction -> IF LPAR expression . RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression . RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression . RPAR instruction ELSE instruction [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression . RPAR instruction [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression . RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On RPAR shift to state 104
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51

State 104:
instruction -> IF LPAR expression RPAR . BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression RPAR . BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression RPAR . instruction ELSE instruction [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression RPAR . instruction [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression RPAR . SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On SEMI shift to state 105
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 147
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On instruction shift to state 154

State 105:
instruction -> IF LPAR expression RPAR SEMI . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On VOID reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On SUB reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On RETURN reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On PUTCHAR reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On INT reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On IF reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On IDENT reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On FOR reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On END reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On ELSE reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On DO reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On BOOL reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On BEGIN reduce production instruction -> IF LPAR expression RPAR SEMI 
-- On ADD reduce production instruction -> IF LPAR expression RPAR SEMI 

State 106:
instruction -> FOR . LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> FOR . LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On LPAR shift to state 107

State 107:
instruction -> FOR LPAR . for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> FOR LPAR . for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On BOOL shift to state 62
-- On ADD shift to state 63
-- On variable_set shift to state 108
-- On typ shift to state 110
-- On for_seq shift to state 113
-- On SEMI reduce production for_seq -> 

State 108:
for_seq -> variable_set . [ SEMI RPAR ]
for_seq -> variable_set . SEPARATOR for_seq [ SEMI RPAR ]
-- On SEPARATOR shift to state 109
-- On SEMI reduce production for_seq -> variable_set 
-- On RPAR reduce production for_seq -> variable_set 

State 109:
for_seq -> variable_set SEPARATOR . for_seq [ SEMI RPAR ]
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On BOOL shift to state 62
-- On ADD shift to state 63
-- On variable_set shift to state 108
-- On typ shift to state 110
-- On for_seq shift to state 112
-- On SEMI reduce production for_seq -> 
-- On RPAR reduce production for_seq -> 

State 110:
variable_set -> typ . IDENT SET expression [ SEPARATOR SEMI RPAR ]
-- On IDENT shift to state 111

State 111:
variable_set -> typ IDENT . SET expression [ SEPARATOR SEMI RPAR ]
-- On SET shift to state 71

State 112:
for_seq -> variable_set SEPARATOR for_seq . [ SEMI RPAR ]
-- On SEMI reduce production for_seq -> variable_set SEPARATOR for_seq 
-- On RPAR reduce production for_seq -> variable_set SEPARATOR for_seq 

State 113:
instruction -> FOR LPAR for_seq . SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> FOR LPAR for_seq . SEMI SEMI for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On SEMI shift to state 114

State 114:
instruction -> FOR LPAR for_seq SEMI . expression SEMI for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> FOR LPAR for_seq SEMI . SEMI for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On SEMI shift to state 115
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 140

State 115:
instruction -> FOR LPAR for_seq SEMI SEMI . for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On BOOL shift to state 62
-- On ADD shift to state 63
-- On variable_set shift to state 108
-- On typ shift to state 110
-- On for_seq shift to state 116
-- On RPAR reduce production for_seq -> 

State 116:
instruction -> FOR LPAR for_seq SEMI SEMI for_seq . RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On RPAR shift to state 117

State 117:
instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR . BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On BEGIN shift to state 118

State 118:
instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN . list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 121
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On list(instruction) shift to state 138
-- On instruction shift to state 129
-- On END reduce production list(instruction) -> 

State 119:
instruction -> DO . BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On BEGIN shift to state 120

State 120:
instruction -> DO BEGIN . list(instruction) END WHILE LPAR expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 121
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On list(instruction) shift to state 131
-- On instruction shift to state 129
-- On END reduce production list(instruction) -> 

State 121:
instruction -> BEGIN . list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 121
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On list(instruction) shift to state 127
-- On instruction shift to state 129
-- On END reduce production list(instruction) -> 

State 122:
instruction -> variable_decl_set . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> variable_decl_set 
-- On VOID reduce production instruction -> variable_decl_set 
-- On SUB reduce production instruction -> variable_decl_set 
-- On RETURN reduce production instruction -> variable_decl_set 
-- On PUTCHAR reduce production instruction -> variable_decl_set 
-- On INT reduce production instruction -> variable_decl_set 
-- On IF reduce production instruction -> variable_decl_set 
-- On IDENT reduce production instruction -> variable_decl_set 
-- On FOR reduce production instruction -> variable_decl_set 
-- On END reduce production instruction -> variable_decl_set 
-- On ELSE reduce production instruction -> variable_decl_set 
-- On DO reduce production instruction -> variable_decl_set 
-- On BOOL reduce production instruction -> variable_decl_set 
-- On BEGIN reduce production instruction -> variable_decl_set 
-- On ADD reduce production instruction -> variable_decl_set 

State 123:
simple_var_decl -> typ . IDENT [ SEMI ]
variable_set -> typ . IDENT SET expression [ SEMI ]
-- On IDENT shift to state 124

State 124:
simple_var_decl -> typ IDENT . [ SEMI ]
variable_set -> typ IDENT . SET expression [ SEMI ]
-- On SET shift to state 71
-- On SEMI reduce production simple_var_decl -> typ IDENT 

State 125:
variable_decl_set -> simple_var_decl . SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR EOF END ELSE DO BOOL BEGIN ADD ]
-- On SEMI shift to state 126

State 126:
variable_decl_set -> simple_var_decl SEMI . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR EOF END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production variable_decl_set -> simple_var_decl SEMI 
-- On VOID reduce production variable_decl_set -> simple_var_decl SEMI 
-- On SUB reduce production variable_decl_set -> simple_var_decl SEMI 
-- On RETURN reduce production variable_decl_set -> simple_var_decl SEMI 
-- On PUTCHAR reduce production variable_decl_set -> simple_var_decl SEMI 
-- On INT reduce production variable_decl_set -> simple_var_decl SEMI 
-- On IF reduce production variable_decl_set -> simple_var_decl SEMI 
-- On IDENT reduce production variable_decl_set -> simple_var_decl SEMI 
-- On FOR reduce production variable_decl_set -> simple_var_decl SEMI 
-- On EOF reduce production variable_decl_set -> simple_var_decl SEMI 
-- On END reduce production variable_decl_set -> simple_var_decl SEMI 
-- On ELSE reduce production variable_decl_set -> simple_var_decl SEMI 
-- On DO reduce production variable_decl_set -> simple_var_decl SEMI 
-- On BOOL reduce production variable_decl_set -> simple_var_decl SEMI 
-- On BEGIN reduce production variable_decl_set -> simple_var_decl SEMI 
-- On ADD reduce production variable_decl_set -> simple_var_decl SEMI 

State 127:
instruction -> BEGIN list(instruction) . END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On END shift to state 128

State 128:
instruction -> BEGIN list(instruction) END . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> BEGIN list(instruction) END 
-- On VOID reduce production instruction -> BEGIN list(instruction) END 
-- On SUB reduce production instruction -> BEGIN list(instruction) END 
-- On RETURN reduce production instruction -> BEGIN list(instruction) END 
-- On PUTCHAR reduce production instruction -> BEGIN list(instruction) END 
-- On INT reduce production instruction -> BEGIN list(instruction) END 
-- On IF reduce production instruction -> BEGIN list(instruction) END 
-- On IDENT reduce production instruction -> BEGIN list(instruction) END 
-- On FOR reduce production instruction -> BEGIN list(instruction) END 
-- On END reduce production instruction -> BEGIN list(instruction) END 
-- On ELSE reduce production instruction -> BEGIN list(instruction) END 
-- On DO reduce production instruction -> BEGIN list(instruction) END 
-- On BOOL reduce production instruction -> BEGIN list(instruction) END 
-- On BEGIN reduce production instruction -> BEGIN list(instruction) END 
-- On ADD reduce production instruction -> BEGIN list(instruction) END 

State 129:
list(instruction) -> instruction . list(instruction) [ END ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 121
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On list(instruction) shift to state 130
-- On instruction shift to state 129
-- On END reduce production list(instruction) -> 

State 130:
list(instruction) -> instruction list(instruction) . [ END ]
-- On END reduce production list(instruction) -> instruction list(instruction) 

State 131:
instruction -> DO BEGIN list(instruction) . END WHILE LPAR expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On END shift to state 132

State 132:
instruction -> DO BEGIN list(instruction) END . WHILE LPAR expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE shift to state 133

State 133:
instruction -> DO BEGIN list(instruction) END WHILE . LPAR expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On LPAR shift to state 134

State 134:
instruction -> DO BEGIN list(instruction) END WHILE LPAR . expression RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On LPAR shift to state 11
-- On IDENT shift to state 12
-- On CST shift to state 14
-- On BOOL_CST shift to state 15
-- On expression shift to state 135

State 135:
expression -> expression . LT expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB RPAR OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
instruction -> DO BEGIN list(instruction) END WHILE LPAR expression . RPAR SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On RPAR shift to state 136
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51

State 136:
instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR . SEMI [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On SEMI shift to state 137

State 137:
instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On VOID reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On SUB reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On RETURN reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On PUTCHAR reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On INT reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On IF reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On IDENT reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On FOR reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On END reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On ELSE reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On DO reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On BOOL reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On BEGIN reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 
-- On ADD reduce production instruction -> DO BEGIN list(instruction) END WHILE LPAR expression RPAR SEMI 

State 138:
instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) . END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On END shift to state 139

State 139:
instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On VOID reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On SUB reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On RETURN reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On PUTCHAR reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On INT reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On IF reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On IDENT reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On FOR reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On END reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On ELSE reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On DO reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On BOOL reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On BEGIN reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 
-- On ADD reduce production instruction -> FOR LPAR for_seq SEMI SEMI for_seq RPAR BEGIN list(instruction) END 

State 140:
expression -> expression . LT expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GT expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . LET expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . GET expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . EQ expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . AND expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BAND expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . OR expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BOR expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . XOR expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BXOR expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . NEQ expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . BNEQ expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . ADD expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MUL expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . DIV expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . MOD expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
expression -> expression . SUB expression [ XOR SUB SEMI OR NEQ MUL MOD LT LET GT GET EQ DIV BXOR BOR BNEQ BAND AND ADD ]
instruction -> FOR LPAR for_seq SEMI expression . SEMI for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On XOR shift to state 17
-- On SUB shift to state 19
-- On SEMI shift to state 141
-- On OR shift to state 21
-- On NEQ shift to state 23
-- On MUL shift to state 25
-- On MOD shift to state 27
-- On LT shift to state 29
-- On LET shift to state 31
-- On GT shift to state 33
-- On GET shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 39
-- On BXOR shift to state 41
-- On BOR shift to state 43
-- On BNEQ shift to state 45
-- On BAND shift to state 47
-- On AND shift to state 49
-- On ADD shift to state 51

State 141:
instruction -> FOR LPAR for_seq SEMI expression SEMI . for_seq RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On BOOL shift to state 62
-- On ADD shift to state 63
-- On variable_set shift to state 108
-- On typ shift to state 110
-- On for_seq shift to state 142
-- On RPAR reduce production for_seq -> 

State 142:
instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq . RPAR BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On RPAR shift to state 143

State 143:
instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR . BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On BEGIN shift to state 144

State 144:
instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN . list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 121
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On list(instruction) shift to state 145
-- On instruction shift to state 129
-- On END reduce production list(instruction) -> 

State 145:
instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) . END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On END shift to state 146

State 146:
instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On VOID reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On SUB reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On RETURN reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On PUTCHAR reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On INT reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On IF reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On IDENT reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On FOR reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On END reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On ELSE reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On DO reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On BOOL reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On BEGIN reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 
-- On ADD reduce production instruction -> FOR LPAR for_seq SEMI expression SEMI for_seq RPAR BEGIN list(instruction) END 

State 147:
instruction -> IF LPAR expression RPAR BEGIN . list(instruction) END ELSE BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression RPAR BEGIN . list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> BEGIN . list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 121
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On list(instruction) shift to state 148
-- On instruction shift to state 129
-- On END reduce production list(instruction) -> 

State 148:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) . END ELSE BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression RPAR BEGIN list(instruction) . END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> BEGIN list(instruction) . END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On END shift to state 149

State 149:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END . ELSE BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> BEGIN list(instruction) END . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On ELSE shift to state 150
-- On WHILE reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On WHILE reduce production instruction -> BEGIN list(instruction) END 
-- On VOID reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On VOID reduce production instruction -> BEGIN list(instruction) END 
-- On SUB reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On SUB reduce production instruction -> BEGIN list(instruction) END 
-- On RETURN reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On RETURN reduce production instruction -> BEGIN list(instruction) END 
-- On PUTCHAR reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On PUTCHAR reduce production instruction -> BEGIN list(instruction) END 
-- On INT reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On INT reduce production instruction -> BEGIN list(instruction) END 
-- On IF reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On IF reduce production instruction -> BEGIN list(instruction) END 
-- On IDENT reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On IDENT reduce production instruction -> BEGIN list(instruction) END 
-- On FOR reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On FOR reduce production instruction -> BEGIN list(instruction) END 
-- On END reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On END reduce production instruction -> BEGIN list(instruction) END 
-- On ELSE reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On ELSE reduce production instruction -> BEGIN list(instruction) END 
-- On DO reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On DO reduce production instruction -> BEGIN list(instruction) END 
-- On BOOL reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On BOOL reduce production instruction -> BEGIN list(instruction) END 
-- On BEGIN reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On BEGIN reduce production instruction -> BEGIN list(instruction) END 
-- On ADD reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END 
-- On ADD reduce production instruction -> BEGIN list(instruction) END 
** Conflict on WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD

State 150:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE . BEGIN list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On BEGIN shift to state 151

State 151:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN . list(instruction) END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 121
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On list(instruction) shift to state 152
-- On instruction shift to state 129
-- On END reduce production list(instruction) -> 

State 152:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) . END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On END shift to state 153

State 153:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On VOID reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On SUB reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On RETURN reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On PUTCHAR reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On INT reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On IF reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On IDENT reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On FOR reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On END reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On ELSE reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On DO reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On BOOL reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On BEGIN reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 
-- On ADD reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END 

State 154:
instruction -> IF LPAR expression RPAR instruction . ELSE instruction [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
instruction -> IF LPAR expression RPAR instruction . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On ELSE shift to state 155
-- On WHILE reduce production instruction -> IF LPAR expression RPAR instruction 
-- On VOID reduce production instruction -> IF LPAR expression RPAR instruction 
-- On SUB reduce production instruction -> IF LPAR expression RPAR instruction 
-- On RETURN reduce production instruction -> IF LPAR expression RPAR instruction 
-- On PUTCHAR reduce production instruction -> IF LPAR expression RPAR instruction 
-- On INT reduce production instruction -> IF LPAR expression RPAR instruction 
-- On IF reduce production instruction -> IF LPAR expression RPAR instruction 
-- On IDENT reduce production instruction -> IF LPAR expression RPAR instruction 
-- On FOR reduce production instruction -> IF LPAR expression RPAR instruction 
-- On END reduce production instruction -> IF LPAR expression RPAR instruction 
-- On ELSE reduce production instruction -> IF LPAR expression RPAR instruction 
-- On DO reduce production instruction -> IF LPAR expression RPAR instruction 
-- On BOOL reduce production instruction -> IF LPAR expression RPAR instruction 
-- On BEGIN reduce production instruction -> IF LPAR expression RPAR instruction 
-- On ADD reduce production instruction -> IF LPAR expression RPAR instruction 
** Conflict on ELSE

State 155:
instruction -> IF LPAR expression RPAR instruction ELSE . instruction [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE shift to state 82
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On RETURN shift to state 88
-- On PUTCHAR shift to state 96
-- On INT shift to state 6
-- On IF shift to state 101
-- On IDENT shift to state 7
-- On FOR shift to state 106
-- On DO shift to state 119
-- On BOOL shift to state 62
-- On BEGIN shift to state 121
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 122
-- On typ shift to state 123
-- On simple_var_decl shift to state 125
-- On instruction shift to state 156

State 156:
instruction -> IF LPAR expression RPAR instruction ELSE instruction . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On VOID reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On SUB reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On RETURN reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On PUTCHAR reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On INT reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On IF reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On IDENT reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On FOR reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On END reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On ELSE reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On DO reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On BOOL reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On BEGIN reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 
-- On ADD reduce production instruction -> IF LPAR expression RPAR instruction ELSE instruction 

State 157:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) . END [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On END shift to state 158

State 158:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END . [ WHILE VOID SUB RETURN PUTCHAR INT IF IDENT FOR END ELSE DO BOOL BEGIN ADD ]
-- On WHILE reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On VOID reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On SUB reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On RETURN reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On PUTCHAR reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On INT reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On IF reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On IDENT reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On FOR reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On END reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On ELSE reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On DO reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On BOOL reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On BEGIN reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 
-- On ADD reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END 

State 159:
function_decl -> typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) . END [ VOID SUB INT IDENT EOF BOOL ADD ]
-- On END shift to state 160

State 160:
function_decl -> typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) END . [ VOID SUB INT IDENT EOF BOOL ADD ]
-- On VOID reduce production function_decl -> typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) END 
-- On SUB reduce production function_decl -> typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) END 
-- On INT reduce production function_decl -> typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) END 
-- On IDENT reduce production function_decl -> typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) END 
-- On EOF reduce production function_decl -> typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) END 
-- On BOOL reduce production function_decl -> typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) END 
-- On ADD reduce production function_decl -> typ IDENT LPAR parameter_list RPAR BEGIN list(instruction) END 

State 161:
program' -> program . [ # ]
-- On # accept program

State 162:
program -> global_scope_def_list . EOF [ # ]
-- On EOF shift to state 163

State 163:
program -> global_scope_def_list EOF . [ # ]
-- On # reduce production program -> global_scope_def_list EOF 

State 164:
global_scope_def_list -> global_scope_def . global_scope_def_list [ EOF ]
-- On VOID shift to state 2
-- On SUB shift to state 3
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On BOOL shift to state 62
-- On ADD shift to state 63
-- On variable_set shift to state 66
-- On variable_decl_set shift to state 68
-- On typ shift to state 69
-- On simple_var_decl shift to state 125
-- On global_scope_def_list shift to state 165
-- On global_scope_def shift to state 164
-- On function_decl shift to state 166
-- On EOF reduce production global_scope_def_list -> 

State 165:
global_scope_def_list -> global_scope_def global_scope_def_list . [ EOF ]
-- On EOF reduce production global_scope_def_list -> global_scope_def global_scope_def_list 

State 166:
global_scope_def -> function_decl . [ VOID SUB INT IDENT EOF BOOL ADD ]
-- On VOID reduce production global_scope_def -> function_decl 
-- On SUB reduce production global_scope_def -> function_decl 
-- On INT reduce production global_scope_def -> function_decl 
-- On IDENT reduce production global_scope_def -> function_decl 
-- On EOF reduce production global_scope_def -> function_decl 
-- On BOOL reduce production global_scope_def -> function_decl 
-- On ADD reduce production global_scope_def -> function_decl 

