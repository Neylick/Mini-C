type token =
    XOR
  | WHILE
  | VOID
  | SWITCH
  | SUB
  | SET
  | SEPARATOR
  | SEMI
  | RPAR
  | RETURN
  | PUTCHAR
  | OR
  | NEQ
  | MUL
  | MOD
  | LT
  | LPAR
  | LET
  | INT
  | IF
  | IDENT of string
  | GT
  | GET
  | FOR
  | EQ
  | EOF
  | END
  | ELSE
  | DOTS2
  | DO
  | DIV
  | DEFAULT
  | CST of int
  | CONTINUE
  | CASE
  | BXOR
  | BREAK
  | BOR
  | BOOL_CST of bool
  | BOOL
  | BNEQ
  | BEGIN
  | BAND
  | AND
  | ADD
val menhir_begin_marker : int
val xv_variable_set : Minic_ast.typ * string * Minic_ast.expr
val xv_variable_decl_set : Minic_ast.typ * string * Minic_ast.expr
val xv_typ : Minic_ast.typ
val xv_simple_var_decl : Minic_ast.typ * string * Minic_ast.expr
val xv_return : Minic_ast.instr
val xv_program : Minic_ast.prog
val xv_parameter_list : (Minic_ast.typ * string) list
val xv_loop : Minic_ast.instr
val xv_list_instruction_ : Minic_ast.seq
val xv_int_op : Minic_ast.expr
val xv_instruction : Minic_ast.instr
val xv_global_scope_def_list : Minic_ast.prog
val xv_global_scope_def : Minic_ast.global_scope_def
val xv_function_decl : Minic_ast.fun_def
val xv_funcall_args : Minic_ast.expr list
val xv_for_seq : Minic_ast.seq
val xv_expression : Minic_ast.expr
val xv_expr_case_list : Minic_ast.expr list
val xv_conditional : Minic_ast.instr
val xv_bool_op : Minic_ast.expr
val xv_block_case_list : (Minic_ast.expr list * Minic_ast.seq) list
val menhir_end_marker : int
